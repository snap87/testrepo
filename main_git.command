git init - создает в текущей папке репо .git чтобы инициализировать репо.
git status - покажет текущие состояние рабочего каталога. 
git add . -добавить файл в черновую область. Сделать их отслеживающими.

Git не даст делать аннонимные коммпиты чтобы не было каши. 
git config --global user.name "Ваше имя"
           --gloabal user.email "Ваша почта"


git log - показать все коммиты. По ID можно обрщаться к любому коммиту.


git checkout commitID - переключит на указанный коммит.
Все предыдущие перстанут отображаться, чтобы вернуться нужно вбить git checkout "имя ветки" (на-р, master).


git branch - покажет все ветки проекта.
git branch "имя ветки". Создаст ветку с указанным именем.
git checkpout -b "имя ветки"- переключиться и создать.

git ls-files - покажет файлы в черновой области.
При удалении файла командой rm он из рабочей области не удаляется, и гит статус покажет файл красным. Т.е. файл в черновой облатси останется.
Чтобы удалить его делаем гит рм имя файла. он станет зеленым и можно коммитить.

отмена изменений файлов.
Пусть мы измениили файл 1.txt дописав туда текст. Потом решили что не надо. Гит статус показывает красненьким что файл изменен. Как вренуть?
Мы должны вернуть  файл на текущий коммит, где мы щас. Для этого делаем git checkout --(можно опустить, говорит, что ветка текущая) 1.txt
Если мы хотим отменить изменения во всех файлах то сделает git checkout .
Это вернет все измененные файлы к текущему коммиту.
P.S. в современных версиях используется git restore для возврата файла. Чтобы везде не юзать checkout.

Если мы добавлили новый файл, но он еще не отслживается проще удалять его командой git clean. Но в начале надо юзать git clean -dn чтобы он показал, какие файлы будут удалены.
Затем git clean -df.

Если мы внесли изменения в отслеживаемую зону и передумали, то мы можем юзать

git restore --staged имя файла. Он вернет файл в черновую зону. А затем
git restore имя файла и будто не менялось ничего.

ОТКАТ коммитов. НИКОГДА НЕ ДЕЛАТЬ ОТКАТ В ПРОЕКТАХ ГДЕ ОН ВЕДЕТ СОВМЕСТНО С КЕМ-ТО.
Исопльзуется команда git reset. Откатываемся на HEAD~1 (один коммит). Есть несколько вариантов отката. 
Мягкий
git reset --soft HEAD~1
Он просто отменит последний коммит, но все изменения останутся в черновой и остлеживаемой области и если мы сделаем git commit то будет тоже самое, будто ничо и не отменяли.
МОжно использоваться если хотим переименовать коммит, для примера. Но в целом данные остаются.

git reset HEAD~1 поведение по умолчанию - удаление нового файла вместе с коммитом. Т.е. удаление его изменений. НО в черновой облатси он останется! МОжн сделать git add файл и коммитить.

git reset --hard HEAD~1. Удаляет везде и все.

Удаление веток.
git branch -d только если ветка слита уже.
git branch -D удалить принудительнл ветку, даже если она не слита.

Затем удаляет ветку с удаленного репо: git push -d origin ttt1. (пример)






Если мы забыли добавить файл в какой-то коммит. 
Смещаем указатель - гит чекуаут коммитИД
добавляем файл. гит адд, коммит. пуш.
Далее создаем другую ветку и сливаем ее с той веткой где забыли. Лишние ветки удаляем.

